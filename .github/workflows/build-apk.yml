name: Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-8-jdk python3-pip autoconf libtool \
          pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev \
          libtinfo6 cmake libffi-dev libssl-dev build-essential \
          libltdl-dev ccache wget curl

    - name: Install Android SDK and tools manually
      run: |
        # Create Android SDK directory
        echo "Creating Android SDK directory..."
        echo "Available disk space:"
        df -h
        echo "Home directory permissions:"
        ls -la $HOME/
        mkdir -p $HOME/.buildozer/android/platform
        cd $HOME/.buildozer/android/platform
        echo "Current directory: $(pwd)"
        echo "Directory permissions:"
        ls -la $HOME/.buildozer/android/
        
        # Download and install Android SDK command line tools
        echo "Downloading Android SDK command line tools..."
        if ! wget -v https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip; then
          echo "Download failed, trying alternative URL..."
          wget -v https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O commandlinetools-linux-8512546_latest.zip
        fi
        
        echo "Verifying download..."
        ls -la commandlinetools-linux-8512546_latest.zip
        
        echo "Extracting command line tools..."
        if ! unzip commandlinetools-linux-8512546_latest.zip; then
          echo "Unzip failed, checking file integrity..."
          file commandlinetools-linux-8512546_latest.zip
          exit 1
        fi
        rm commandlinetools-linux-8512546_latest.zip
        
        # Create proper SDK structure
        echo "Creating SDK directory structure..."
        mkdir -p android-sdk/cmdline-tools/latest
        ls -la
        echo "Moving command line tools..."
        mv cmdline-tools/* android-sdk/cmdline-tools/latest/ || { echo "Move failed"; ls -la cmdline-tools/; exit 1; }
        rmdir cmdline-tools
        
        # Create the old tools/bin directory structure that buildozer expects
        mkdir -p android-sdk/tools/bin
        # Create symlinks for buildozer compatibility
        ln -s ../../cmdline-tools/latest/bin/sdkmanager android-sdk/tools/bin/sdkmanager
        ln -s ../../cmdline-tools/latest/bin/avdmanager android-sdk/tools/bin/avdmanager
        
        # Also download the deprecated SDK tools that buildozer might need
        echo "Downloading deprecated SDK tools for buildozer compatibility..."
        cd android-sdk
        if wget -v https://dl.google.com/android/repository/tools_r26.1.1-linux.zip; then
          echo "Extracting deprecated SDK tools..."
          unzip tools_r26.1.1-linux.zip
          rm tools_r26.1.1-linux.zip
          echo "Deprecated tools installed successfully"
        else
          echo "Failed to download deprecated tools, continuing with symlinks only..."
        fi
        # This creates a tools/ directory with the old structure
        cd ..
        
        # Set up environment
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
        
        # Accept licenses first
        mkdir -p $ANDROID_SDK_ROOT/licenses
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        
        # Install required SDK components with proper license acceptance
        echo "Installing SDK components..."
        printf "y\ny\ny\ny\ny\ny\n" | timeout 300 $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-31" "build-tools;31.0.0" || echo "SDK installation completed with timeout/error"
        
        # Download and install Android NDK
        echo "Downloading Android NDK..."
        if ! wget -v https://dl.google.com/android/repository/android-ndk-r25b-linux.zip; then
          echo "NDK download failed"
          exit 1
        fi
        
        echo "Extracting Android NDK..."
        if ! unzip android-ndk-r25b-linux.zip; then
          echo "NDK extraction failed"
          ls -la android-ndk-r25b-linux.zip
          exit 1
        fi
        # NDK is already extracted to android-ndk-r25b, no need to move
        rm android-ndk-r25b-linux.zip
        
        # Verify NDK installation
        echo "Verifying NDK installation..."
        ls -la android-ndk-r25b/ | head -5

    - name: Set up Java and Android environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-8-openjdk-amd64/bin" >> $GITHUB_PATH
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
        echo "$HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/.buildozer/android/platform/android-sdk/platform-tools" >> $GITHUB_PATH

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer==1.4.0 cython
        pip install "kivy[base]==2.1.0" requests pillow plyer
        # Install kivy-garden.mapview
        pip install kivy-garden.mapview
        # Update python-for-android to latest for better file exclusion
        pip install --upgrade python-for-android

    - name: Verify Android SDK installation
      run: |
        echo "Verifying Android SDK and NDK installation..."
        echo "SDK structure:"
        ls -la $HOME/.buildozer/android/platform/android-sdk/
        echo "NDK structure:"
        ls -la $HOME/.buildozer/android/platform/android-ndk-r25b/ | head -10
        echo "Checking sdkmanager..."
        which sdkmanager || echo "sdkmanager not in PATH"
        echo "sdkmanager version:"
        $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --version
        echo "Installed SDK packages:"
        $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --list --sdk_root=$HOME/.buildozer/android/platform/android-sdk | grep "Installed packages" -A 10
        echo "Checking buildozer-expected sdkmanager path:"
        ls -la $HOME/.buildozer/android/platform/android-sdk/tools/bin/
        echo "Testing buildozer-expected sdkmanager:"
        $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager --version

    - name: Cache buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-

    - name: Cache buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Final environment setup
      run: |
        echo "Final environment check..."
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME" 
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        
        # Set additional environment variables for buildozer
        echo "ANDROIDAPI=31" >> $GITHUB_ENV
        echo "ANDROIDMINAPI=21" >> $GITHUB_ENV
        echo "ANDROIDSDK=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDNDK=$ANDROID_NDK_ROOT" >> $GITHUB_ENV

    - name: Clean problematic files
      run: |
        echo "Cleaning problematic files that might cause unicode issues..."
        # Remove test files and cache directories
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true
        find . -name "*.pyo" -delete 2>/dev/null || true
        find . -name "test_*.py" -delete 2>/dev/null || true
        find . -name "*_test.py" -delete 2>/dev/null || true
        find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name ".tox" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Remove any files with potentially problematic unicode names
        find . -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Remove the specific problematic file mentioned in the error
        find . -name "badsyntax_pep3120.py" -delete 2>/dev/null || true
        
        # Remove any Python test directories that might interfere
        find . -type d -name "test" -exec rm -rf {} + 2>/dev/null || true
        find . -type d -path "*/Lib/test" -exec rm -rf {} + 2>/dev/null || true
        
        echo "Cleanup completed"

    - name: Build APK with Buildozer
      run: |
        # Debug information
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer version)"
        echo "Java version: $(java -version)"
        echo "JAVA_HOME: $JAVA_HOME"
        
        # Create directories if they don't exist
        mkdir -p bin
        
        # Verify environment is properly set
        echo "SDK Root: $ANDROID_SDK_ROOT"
        echo "NDK Root: $ANDROID_NDK_ROOT"
        ls -la "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/" || echo "cmdline-tools not found"
        
        # Set locale for proper unicode handling
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8
        export PYTHONIOENCODING=utf-8
        
        # Clean any previous buildozer artifacts
        echo "Cleaning previous build artifacts..."
        buildozer android clean || echo "No previous build to clean"
        
        # Also remove .buildozer directory to ensure completely fresh build
        echo "Removing any existing .buildozer directory for fresh build..."
        rm -rf .buildozer || echo "No .buildozer directory to remove"
        
        # Try minimal build first to test basic functionality
        echo "Attempting minimal build first..."
        cp buildozer-minimal.spec buildozer-temp.spec
        mv buildozer.spec buildozer-full.spec
        mv buildozer-temp.spec buildozer.spec
        
        # Run buildozer with debug logging (minimal version first)
        if ! buildozer android debug --verbose; then
          echo "Minimal build failed, trying with full configuration..."
          mv buildozer.spec buildozer-minimal-failed.spec
          mv buildozer-full.spec buildozer.spec
          buildozer android debug --verbose
        else
          echo "Minimal build succeeded! Trying full build..."
          mv buildozer.spec buildozer-minimal-success.spec
          mv buildozer-full.spec buildozer.spec
          buildozer android debug --verbose || echo "Full build failed but minimal succeeded"
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: freevia-debug-apk
        path: bin/*.apk

    - name: List build outputs
      run: |
        echo "Build completed successfully!"
        echo "Generated files:"
        ls -la bin/
        
    - name: Create Release (if on main/master branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Freevia APK v${{ github.run_number }}
        body: |
          Automated APK build from commit ${{ github.sha }}
          
          **Download the APK:**
          - freevia-debug.apk - Ready to install on Android devices
          
          **Features:**
          - User registration and login
          - Item sharing with photos and location
          - Interactive map with GPS
          - Profile management
          - iOS-style UI design
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}