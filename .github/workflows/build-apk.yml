name: Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.19'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-8-jdk python3-pip autoconf libtool \
          pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev \
          libtinfo6 cmake libffi-dev libssl-dev build-essential \
          libltdl-dev ccache wget curl

    - name: Install Android SDK and tools manually
      run: |
        # Create Android SDK directory
        mkdir -p $HOME/.buildozer/android/platform
        cd $HOME/.buildozer/android/platform
        
        # Download and install Android SDK command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
        unzip -q commandlinetools-linux-8512546_latest.zip
        rm commandlinetools-linux-8512546_latest.zip
        
        # Create proper SDK structure
        mkdir -p android-sdk/cmdline-tools/latest
        mv cmdline-tools/* android-sdk/cmdline-tools/latest/
        rmdir cmdline-tools
        
        # Set up environment
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
        
        # Accept licenses first
        mkdir -p $ANDROID_SDK_ROOT/licenses
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        
        # Install required SDK components
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-31" "build-tools;31.0.0"
        
        # Download and install Android NDK
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip
        mv android-ndk-r25b android-ndk-r25b
        rm android-ndk-r25b-linux.zip

    - name: Set up Java and Android environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-8-openjdk-amd64/bin" >> $GITHUB_PATH
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
        echo "$HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/.buildozer/android/platform/android-sdk/platform-tools" >> $GITHUB_PATH

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer==1.4.0 cython==0.29.33
        pip install "kivy[base]==2.1.0" requests pillow plyer
        # Install kivy-garden.mapview
        pip install kivy-garden.mapview

    - name: Verify Android SDK installation
      run: |
        echo "Verifying Android SDK installation..."
        ls -la $HOME/.buildozer/android/platform/android-sdk/
        echo "Checking sdkmanager..."
        which sdkmanager || echo "sdkmanager not in PATH"
        $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --version

    - name: Cache buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-

    - name: Cache buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Final environment setup
      run: |
        echo "Final environment check..."
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME" 
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"

    - name: Build APK with Buildozer
      run: |
        # Debug information
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer version)"
        echo "Java version: $(java -version)"
        echo "JAVA_HOME: $JAVA_HOME"
        
        # Create directories if they don't exist
        mkdir -p bin
        
        # Verify environment is properly set
        echo "SDK Root: $ANDROID_SDK_ROOT"
        echo "NDK Root: $ANDROID_NDK_ROOT"
        ls -la "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/" || echo "cmdline-tools not found"
        
        # Try minimal build first to test basic functionality
        echo "Attempting minimal build first..."
        cp buildozer-minimal.spec buildozer-temp.spec
        mv buildozer.spec buildozer-full.spec
        mv buildozer-temp.spec buildozer.spec
        
        # Run buildozer with debug logging (minimal version first)
        if ! buildozer android debug --verbose; then
          echo "Minimal build failed, trying with full configuration..."
          mv buildozer.spec buildozer-minimal-failed.spec
          mv buildozer-full.spec buildozer.spec
          buildozer android debug --verbose
        else
          echo "Minimal build succeeded! Trying full build..."
          mv buildozer.spec buildozer-minimal-success.spec
          mv buildozer-full.spec buildozer.spec
          buildozer android debug --verbose || echo "Full build failed but minimal succeeded"
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: freevia-debug-apk
        path: bin/*.apk

    - name: List build outputs
      run: |
        echo "Build completed successfully!"
        echo "Generated files:"
        ls -la bin/
        
    - name: Create Release (if on main/master branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Freevia APK v${{ github.run_number }}
        body: |
          Automated APK build from commit ${{ github.sha }}
          
          **Download the APK:**
          - freevia-debug.apk - Ready to install on Android devices
          
          **Features:**
          - User registration and login
          - Item sharing with photos and location
          - Interactive map with GPS
          - Profile management
          - iOS-style UI design
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}